# -*- coding: utf-8 -*-
"""SentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jwmQ_CMYYEz69EG5HiffAQAvS1kMBWfh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""1. Importing DataSets"""

data_2020 = pd.read_csv("2020_Nomadland.csv")
data_2020.columns = [c.replace(' ', '_') for c in data_2020.columns]
data_2020.head()

data_2020['Sentiment'] = data_2020['rating'].apply(lambda x: 1 if x>5 else 0)
del(data_2020["Overall_Review"])
data_2020

data_2020_new = pd.DataFrame({"review_content1":data_2020["review_content"], "Sentiment1":data_2020["Sentiment"]})
data_2020_new

data_2020_new.shape

data_2020_new['Sentiment1'].value_counts()

data_2020_new.isnull().sum()

x = data_2020_new["review_content1"]
y = data_2020_new["Sentiment1"]

"""2. Data Cleaning"""

import string
punct = string.punctuation
punct

from spacy.lang.en.stop_words import STOP_WORDS
stopwords = list(STOP_WORDS)

import spacy

nlp = spacy.load('en_core_web_sm')

def text_data_cleaning(sentence):
  doc = nlp(sentence)

  tokens = []
  for token in doc:
    if token.lemma_ != "-PRON-":
      temp = token.lemma_.lower().strip()
    else:
      temp = token.lower_
    tokens.append(temp)

  cleaned_tokens = []
  for token in tokens:
    if token not in stopwords and token not in punct:
      cleaned_tokens.append(token)
  return cleaned_tokens

text_data_cleaning("Hello all, it's a beautiful day outside there!") #forexample

"""Vectorization Feature Engineering (TF-IDF)"""

from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline

tfidf = TfidfVectorizer(tokenizer=text_data_cleaning)

classifier = LinearSVC()

"""3. Train the model"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 0)

x_train.shape, x_test.shape

x_train.head()

"""Fit the x_train and y_train"""

clf = Pipeline([('tfidf', tfidf), ('clf', classifier)])

clf.fit(x_train, y_train)

"""4. Predict the Test Set Results"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

y_pred = clf.predict(x_test)

confusion_matrix(y_test, y_pred) #73.6% accuracy

#classification report
print(classification_report(y_test, y_pred))
#we are getting almost 74% accuracy

accuracy_score(y_test, y_pred)

clf.predict(["I love this movie"])
#output is 1, that means the review is Positive

clf.predict(["I hate this movie. It was a waste of my time"])
#output is 0, that means the review is Negative